schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

"""
Account has default account interface with additional
account properties
"""
type Account implements AccountInterface
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
{
  """The createdAt time of the account"""
  createdAt: Time! @join__field(graph: ACCOUNTS)

  """The email address of the account"""
  emailAddress: String! @join__field(graph: ACCOUNTS)

  """The unique identifier for the account"""
  id: UUID! @join__field(graph: ACCOUNTS)

  """The updatedAt time of the account"""
  updatedAt: Time! @join__field(graph: ACCOUNTS)
}

"""
Account interface defines key
shared account properties
"""
interface AccountInterface {
  """The createdAt time of the account"""
  createdAt: Time!

  """The email address of the account"""
  emailAddress: String!

  """The unique identifier for the account"""
  id: UUID!

  """The updatedAt time of the account"""
  updatedAt: Time!
}

type Mutation {
  """Delete account by commonID"""
  deleteAccount(commonID: UUID!): Time! @join__field(graph: ACCOUNTS)
  empty: Boolean! @join__field(graph: ACCOUNTS)
}

type Query {
  """Obtains the account by commonID or email address"""
  account(input: RetrieveAccountInput!): Account @join__field(graph: ACCOUNTS)
  empty: Boolean! @join__field(graph: ACCOUNTS)

  """Viewer is the root query object for the user"""
  viewer(
    """The unique identifier for the viewer"""
    commonID: UUID!
  ): Viewer @join__field(graph: ACCOUNTS)
}

"""Uses either the commonID or email address to fetch user"""
input RetrieveAccountInput {
  """commonID is the unique identifier for an account"""
  commonID: UUID

  """emailAddress defines the unique email address for the account"""
  emailAddress: String
}

scalar Time

scalar UUID

"""Viewer is the root query object for the user"""
type Viewer implements AccountInterface {
  """The createdAt time of the account"""
  createdAt: Time! @join__field(graph: ACCOUNTS)

  """The email address of the account"""
  emailAddress: String! @join__field(graph: ACCOUNTS)
  empty: Boolean!

  """The unique identifier for the account"""
  id: UUID! @join__field(graph: ACCOUNTS)

  """The updatedAt time of the account"""
  updatedAt: Time! @join__field(graph: ACCOUNTS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://accounts-graphql-prod.internal:8080/graphql")
}
