package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"apps/services/accounts-graphql/internal/graph/models"
	"context"
	"fmt"
	accountsapiv1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"

	"connectrpc.com/connect"
	"github.com/google/uuid"
)

// Account is the resolver for the account field.
func (r *viewerResolver) Account(ctx context.Context, obj *models.Viewer, id uuid.UUID) (*models.Account, error) {
	// Call the Accounts API
	resp, err := r.AccountsAPIClient.GetAccount(ctx, connect.NewRequest(&accountsapiv1.GetAccountRequest{
		CommonId: id.String(),
	}))

	// Check if there was an error or if the account is nil
	if err != nil || resp.Msg.Account == nil {
		return nil, fmt.Errorf("error getting account by commonID: %w", err)
	}

	return &models.Account{
		ID:           uuid.MustParse(resp.Msg.Account.CommonId),
		EmailAddress: resp.Msg.Account.EmailAddress,
		CreatedAt:    resp.Msg.Account.CreatedAt.AsTime(),
		UpdatedAt:    resp.Msg.Account.UpdatedAt.AsTime(),
	}, nil
}
