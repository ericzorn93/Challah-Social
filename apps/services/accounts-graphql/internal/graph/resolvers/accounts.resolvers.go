package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"apps/services/accounts-graphql/internal/graph/models"
	"context"
	"fmt"
	accountsapiv1 "libs/backend/proto-gen/go/accounts/accountsapi/v1"

	"connectrpc.com/connect"
	"github.com/google/uuid"
)

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, input models.RetrieveAccountInput) (*models.Account, error) {
	// Call the Accounts API
	commonID := input.CommonID
	emailAddress := input.EmailAddress

	var commonIDForSearch *string
	var emailAddressForSearch *string

	switch {
	case commonID != nil:
		commonIDStr := commonID.String()
		commonIDForSearch = &commonIDStr
	case emailAddress != nil:
		emailAddressForSearch = emailAddress
	}

	resp, err := r.AccountsAPIClient.GetAccount(ctx, connect.NewRequest(&accountsapiv1.GetAccountRequest{
		CommonId:     commonIDForSearch,
		EmailAddress: emailAddressForSearch,
	}))

	// Check if there was an error or if the account is nil
	if err != nil || resp.Msg.Account == nil {
		return nil, fmt.Errorf("error getting account by commonID: %w", err)
	}

	// Parse values (commonID,)
	parsedCommonID, err := uuid.Parse(resp.Msg.Account.CommonId)
	if err != nil {
		return nil, fmt.Errorf("commonID cannot be parsed from account: %w", err)
	}

	return &models.Account{
		ID:           parsedCommonID,
		EmailAddress: resp.Msg.Account.EmailAddress,
		CreatedAt:    resp.Msg.Account.CreatedAt.AsTime(),
		UpdatedAt:    resp.Msg.Account.UpdatedAt.AsTime(),
	}, nil
}
