// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: webhooks/inboundwebhooksapi/v1/clerk_auth.proto

package inboundwebhooksapiv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClerkUser represents the entire user object that is going
// to be passed in Clerk Authentication webhooks
type ClerkUser struct {
	state                 protoimpl.MessageState    `protogen:"open.v1"`
	Birthday              string                    `protobuf:"bytes,1,opt,name=birthday,proto3" json:"birthday,omitempty"`
	CreatedAt             uint64                    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EmailAddresses        []*ClerkUser_EmailAddress `protobuf:"bytes,3,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	ExternalAccounts      []*anypb.Any              `protobuf:"bytes,4,rep,name=external_accounts,json=externalAccounts,proto3" json:"external_accounts,omitempty"`
	ExternalId            string                    `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	FirstName             string                    `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Gender                string                    `protobuf:"bytes,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Id                    string                    `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	ImageUrl              string                    `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	LastName              string                    `protobuf:"bytes,10,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	LastSignInAt          uint64                    `protobuf:"varint,11,opt,name=last_sign_in_at,json=lastSignInAt,proto3" json:"last_sign_in_at,omitempty"`
	Object                string                    `protobuf:"bytes,12,opt,name=object,proto3" json:"object,omitempty"`
	PasswordEnabled       bool                      `protobuf:"varint,13,opt,name=password_enabled,json=passwordEnabled,proto3" json:"password_enabled,omitempty"`
	PhoneNumbers          []*ClerkUser_PhoneNumber  `protobuf:"bytes,14,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"` // Changed from google.protobuf.Any to PhoneNumber
	PrimaryEmailAddressId string                    `protobuf:"bytes,15,opt,name=primary_email_address_id,json=primaryEmailAddressId,proto3" json:"primary_email_address_id,omitempty"`
	PrimaryPhoneNumberId  string                    `protobuf:"bytes,16,opt,name=primary_phone_number_id,json=primaryPhoneNumberId,proto3" json:"primary_phone_number_id,omitempty"`
	PrimaryWeb3WalletId   string                    `protobuf:"bytes,17,opt,name=primary_web3_wallet_id,json=primaryWeb3WalletId,proto3" json:"primary_web3_wallet_id,omitempty"`
	PrivateMetadata       map[string]*anypb.Any     `protobuf:"bytes,18,rep,name=private_metadata,json=privateMetadata,proto3" json:"private_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Changed keys from Any to string for clarity
	ProfileImageUrl       string                    `protobuf:"bytes,19,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	PublicMetadata        map[string]*anypb.Any     `protobuf:"bytes,20,rep,name=public_metadata,json=publicMetadata,proto3" json:"public_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Changed keys from Any to string for clarity
	TwoFactorEnabled      bool                      `protobuf:"varint,21,opt,name=two_factor_enabled,json=twoFactorEnabled,proto3" json:"two_factor_enabled,omitempty"`
	UnsafeMetadata        map[string]*anypb.Any     `protobuf:"bytes,22,rep,name=unsafe_metadata,json=unsafeMetadata,proto3" json:"unsafe_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Changed keys from Any to string for clarity
	UpdatedAt             uint64                    `protobuf:"varint,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Username              string                    `protobuf:"bytes,24,opt,name=username,proto3" json:"username,omitempty"`
	Web3Wallets           []*anypb.Any              `protobuf:"bytes,25,rep,name=web3_wallets,json=web3Wallets,proto3" json:"web3_wallets,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClerkUser) Reset() {
	*x = ClerkUser{}
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClerkUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClerkUser) ProtoMessage() {}

func (x *ClerkUser) ProtoReflect() protoreflect.Message {
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClerkUser.ProtoReflect.Descriptor instead.
func (*ClerkUser) Descriptor() ([]byte, []int) {
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP(), []int{0}
}

func (x *ClerkUser) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *ClerkUser) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ClerkUser) GetEmailAddresses() []*ClerkUser_EmailAddress {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *ClerkUser) GetExternalAccounts() []*anypb.Any {
	if x != nil {
		return x.ExternalAccounts
	}
	return nil
}

func (x *ClerkUser) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *ClerkUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ClerkUser) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ClerkUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClerkUser) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ClerkUser) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ClerkUser) GetLastSignInAt() uint64 {
	if x != nil {
		return x.LastSignInAt
	}
	return 0
}

func (x *ClerkUser) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ClerkUser) GetPasswordEnabled() bool {
	if x != nil {
		return x.PasswordEnabled
	}
	return false
}

func (x *ClerkUser) GetPhoneNumbers() []*ClerkUser_PhoneNumber {
	if x != nil {
		return x.PhoneNumbers
	}
	return nil
}

func (x *ClerkUser) GetPrimaryEmailAddressId() string {
	if x != nil {
		return x.PrimaryEmailAddressId
	}
	return ""
}

func (x *ClerkUser) GetPrimaryPhoneNumberId() string {
	if x != nil {
		return x.PrimaryPhoneNumberId
	}
	return ""
}

func (x *ClerkUser) GetPrimaryWeb3WalletId() string {
	if x != nil {
		return x.PrimaryWeb3WalletId
	}
	return ""
}

func (x *ClerkUser) GetPrivateMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.PrivateMetadata
	}
	return nil
}

func (x *ClerkUser) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *ClerkUser) GetPublicMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.PublicMetadata
	}
	return nil
}

func (x *ClerkUser) GetTwoFactorEnabled() bool {
	if x != nil {
		return x.TwoFactorEnabled
	}
	return false
}

func (x *ClerkUser) GetUnsafeMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.UnsafeMetadata
	}
	return nil
}

func (x *ClerkUser) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ClerkUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClerkUser) GetWeb3Wallets() []*anypb.Any {
	if x != nil {
		return x.Web3Wallets
	}
	return nil
}

// Verification represents the verification status of user attributes
type ClerkUser_Verification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Strategy      string                 `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClerkUser_Verification) Reset() {
	*x = ClerkUser_Verification{}
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClerkUser_Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClerkUser_Verification) ProtoMessage() {}

func (x *ClerkUser_Verification) ProtoReflect() protoreflect.Message {
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClerkUser_Verification.ProtoReflect.Descriptor instead.
func (*ClerkUser_Verification) Descriptor() ([]byte, []int) {
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClerkUser_Verification) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ClerkUser_Verification) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

// LinkedTo represents an entity linked to another object
type ClerkUser_LinkedTo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClerkUser_LinkedTo) Reset() {
	*x = ClerkUser_LinkedTo{}
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClerkUser_LinkedTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClerkUser_LinkedTo) ProtoMessage() {}

func (x *ClerkUser_LinkedTo) ProtoReflect() protoreflect.Message {
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClerkUser_LinkedTo.ProtoReflect.Descriptor instead.
func (*ClerkUser_LinkedTo) Descriptor() ([]byte, []int) {
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClerkUser_LinkedTo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClerkUser_LinkedTo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// EmailAddress represents an email address of the user
type ClerkUser_EmailAddress struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	EmailAddress  string                  `protobuf:"bytes,1,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Id            string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	LinkedTo      []*ClerkUser_LinkedTo   `protobuf:"bytes,3,rep,name=linked_to,json=linkedTo,proto3" json:"linked_to,omitempty"` // Changed from google.protobuf.Any to LinkedTo
	Object        string                  `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	Verification  *ClerkUser_Verification `protobuf:"bytes,5,opt,name=verification,proto3" json:"verification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClerkUser_EmailAddress) Reset() {
	*x = ClerkUser_EmailAddress{}
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClerkUser_EmailAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClerkUser_EmailAddress) ProtoMessage() {}

func (x *ClerkUser_EmailAddress) ProtoReflect() protoreflect.Message {
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClerkUser_EmailAddress.ProtoReflect.Descriptor instead.
func (*ClerkUser_EmailAddress) Descriptor() ([]byte, []int) {
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClerkUser_EmailAddress) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *ClerkUser_EmailAddress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClerkUser_EmailAddress) GetLinkedTo() []*ClerkUser_LinkedTo {
	if x != nil {
		return x.LinkedTo
	}
	return nil
}

func (x *ClerkUser_EmailAddress) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ClerkUser_EmailAddress) GetVerification() *ClerkUser_Verification {
	if x != nil {
		return x.Verification
	}
	return nil
}

// PhoneNumber represents a phone number associated with the user
type ClerkUser_PhoneNumber struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PhoneNumber             string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	ReservedForSecondFactor bool                   `protobuf:"varint,3,opt,name=reserved_for_second_factor,json=reservedForSecondFactor,proto3" json:"reserved_for_second_factor,omitempty"`
	DefaultSecondFactor     bool                   `protobuf:"varint,4,opt,name=default_second_factor,json=defaultSecondFactor,proto3" json:"default_second_factor,omitempty"`
	LinkedTo                []*ClerkUser_LinkedTo  `protobuf:"bytes,5,rep,name=linked_to,json=linkedTo,proto3" json:"linked_to,omitempty"`
	BackupCodes             []string               `protobuf:"bytes,6,rep,name=backup_codes,json=backupCodes,proto3" json:"backup_codes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ClerkUser_PhoneNumber) Reset() {
	*x = ClerkUser_PhoneNumber{}
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClerkUser_PhoneNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClerkUser_PhoneNumber) ProtoMessage() {}

func (x *ClerkUser_PhoneNumber) ProtoReflect() protoreflect.Message {
	mi := &file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClerkUser_PhoneNumber.ProtoReflect.Descriptor instead.
func (*ClerkUser_PhoneNumber) Descriptor() ([]byte, []int) {
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClerkUser_PhoneNumber) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClerkUser_PhoneNumber) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ClerkUser_PhoneNumber) GetReservedForSecondFactor() bool {
	if x != nil {
		return x.ReservedForSecondFactor
	}
	return false
}

func (x *ClerkUser_PhoneNumber) GetDefaultSecondFactor() bool {
	if x != nil {
		return x.DefaultSecondFactor
	}
	return false
}

func (x *ClerkUser_PhoneNumber) GetLinkedTo() []*ClerkUser_LinkedTo {
	if x != nil {
		return x.LinkedTo
	}
	return nil
}

func (x *ClerkUser_PhoneNumber) GetBackupCodes() []string {
	if x != nil {
		return x.BackupCodes
	}
	return nil
}

var File_webhooks_inboundwebhooksapi_v1_clerk_auth_proto protoreflect.FileDescriptor

var file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDesc = string([]byte{
	0x0a, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x65, 0x72, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x11, 0x0a,
	0x09, 0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x62,
	0x33, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x57, 0x65, 0x62, 0x33, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x66, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x74, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0f, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x33, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x33, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x1a,
	0x42, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x1a, 0x2e, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x88, 0x02, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa5,
	0x02, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x57, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x13, 0x55, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x9d, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x2e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6c, 0x65, 0x72, 0x6b,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f,
	0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x57, 0x49, 0x58,
	0xaa, 0x02, 0x1e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5c, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x2a, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5c, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x20, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x3a, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x61, 0x70, 0x69, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescOnce sync.Once
	file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescData []byte
)

func file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescGZIP() []byte {
	file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescOnce.Do(func() {
		file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDesc), len(file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDesc)))
	})
	return file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDescData
}

var file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_goTypes = []any{
	(*ClerkUser)(nil),              // 0: webhooks.inboundwebhooksapi.v1.ClerkUser
	(*ClerkUser_Verification)(nil), // 1: webhooks.inboundwebhooksapi.v1.ClerkUser.Verification
	(*ClerkUser_LinkedTo)(nil),     // 2: webhooks.inboundwebhooksapi.v1.ClerkUser.LinkedTo
	(*ClerkUser_EmailAddress)(nil), // 3: webhooks.inboundwebhooksapi.v1.ClerkUser.EmailAddress
	(*ClerkUser_PhoneNumber)(nil),  // 4: webhooks.inboundwebhooksapi.v1.ClerkUser.PhoneNumber
	nil,                            // 5: webhooks.inboundwebhooksapi.v1.ClerkUser.PrivateMetadataEntry
	nil,                            // 6: webhooks.inboundwebhooksapi.v1.ClerkUser.PublicMetadataEntry
	nil,                            // 7: webhooks.inboundwebhooksapi.v1.ClerkUser.UnsafeMetadataEntry
	(*anypb.Any)(nil),              // 8: google.protobuf.Any
}
var file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_depIdxs = []int32{
	3,  // 0: webhooks.inboundwebhooksapi.v1.ClerkUser.email_addresses:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.EmailAddress
	8,  // 1: webhooks.inboundwebhooksapi.v1.ClerkUser.external_accounts:type_name -> google.protobuf.Any
	4,  // 2: webhooks.inboundwebhooksapi.v1.ClerkUser.phone_numbers:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.PhoneNumber
	5,  // 3: webhooks.inboundwebhooksapi.v1.ClerkUser.private_metadata:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.PrivateMetadataEntry
	6,  // 4: webhooks.inboundwebhooksapi.v1.ClerkUser.public_metadata:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.PublicMetadataEntry
	7,  // 5: webhooks.inboundwebhooksapi.v1.ClerkUser.unsafe_metadata:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.UnsafeMetadataEntry
	8,  // 6: webhooks.inboundwebhooksapi.v1.ClerkUser.web3_wallets:type_name -> google.protobuf.Any
	2,  // 7: webhooks.inboundwebhooksapi.v1.ClerkUser.EmailAddress.linked_to:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.LinkedTo
	1,  // 8: webhooks.inboundwebhooksapi.v1.ClerkUser.EmailAddress.verification:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.Verification
	2,  // 9: webhooks.inboundwebhooksapi.v1.ClerkUser.PhoneNumber.linked_to:type_name -> webhooks.inboundwebhooksapi.v1.ClerkUser.LinkedTo
	8,  // 10: webhooks.inboundwebhooksapi.v1.ClerkUser.PrivateMetadataEntry.value:type_name -> google.protobuf.Any
	8,  // 11: webhooks.inboundwebhooksapi.v1.ClerkUser.PublicMetadataEntry.value:type_name -> google.protobuf.Any
	8,  // 12: webhooks.inboundwebhooksapi.v1.ClerkUser.UnsafeMetadataEntry.value:type_name -> google.protobuf.Any
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_init() }
func file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_init() {
	if File_webhooks_inboundwebhooksapi_v1_clerk_auth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDesc), len(file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_goTypes,
		DependencyIndexes: file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_depIdxs,
		MessageInfos:      file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_msgTypes,
	}.Build()
	File_webhooks_inboundwebhooksapi_v1_clerk_auth_proto = out.File
	file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_goTypes = nil
	file_webhooks_inboundwebhooksapi_v1_clerk_auth_proto_depIdxs = nil
}
